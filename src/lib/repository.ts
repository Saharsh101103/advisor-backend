// GENERATED by @gel/generate v0.6.4

import type { Executor } from "gel";

export type CreateUserQueryArgs = {
  readonly email: string;
  readonly name: string;
  readonly password: string;
};

export type CreateUserQueryReturns = {
  id: string;
};

export function createUserQuery(
  client: Executor,
  args: CreateUserQueryArgs
): Promise<CreateUserQueryReturns> {
  return client.queryRequiredSingle(
    `\
INSERT User {
    name := <str>$name,
    email := <str>$email,
    password := <str>$password
  }`,
    args
  );
}

export type GetUserByIdQueryArgs = {
  readonly id: string;
};

export type GetUserByIdQueryReturns = {
  email: string;
  id: string;
  name: string;
  password: string;
  serial_id: number;
  created_at: Date | null;
  is_deleted: boolean | null;
  updated_at: Date | null;
} | null;

export function getUserByIdQuery(
  client: Executor,
  args: GetUserByIdQueryArgs
): Promise<GetUserByIdQueryReturns> {
  return client.querySingle(
    `\
SELECT User {
    *
  }
FILTER .id= <uuid>$id 
LIMIT 1`,
    args
  );
}

export type ValidateUserQueryArgs = {
  readonly email: string;
  readonly password: string;
};

export type ValidateUserQueryReturns = {
  id: string;
} | null;

export function validateUserQuery(
  client: Executor,
  args: ValidateUserQueryArgs
): Promise<ValidateUserQueryReturns> {
  return client.querySingle(
    `\
SELECT User 
FILTER .email = <str>$email AND .password = <str>$password 
LIMIT 1`,
    args
  );
}

export type GetStudentsQueryReturns = Array<{
  completed_credits: number;
  enrollment_year: number;
  expected_graduation: number;
  gpa: number;
  id: string;
  major: string;
  required_credits: number;
  role: "STUDENT" | "ADVISOR";
  created_at: Date | null;
  is_deleted: boolean | null;
  updated_at: Date | null;
  advisor: {
    user: {
      name: string;
    };
  };
  user: {
    email: string;
    name: string;
    serial_id: number;
  };
}>;

export function getStudentsQuery(client: Executor): Promise<GetStudentsQueryReturns> {
  return client.query(`\
SELECT Student {
  *,
  advisor: {
    user: {
      name 
    }
  },
  user: {
    serial_id,
    name,
    email
    }
}
FILTER .is_deleted = false`);
}

export type CreateStudentQueryArgs = {
  readonly advisor_email: string;
  readonly completed_credits: number;
  readonly enrollment_year: number;
  readonly expected_graduation: number;
  readonly gpa: number;
  readonly major: string;
  readonly required_credits: number;
  readonly user_id: string;
};

export type CreateStudentQueryReturns = {
  id: string;
};

export function createStudentQuery(
  client: Executor,
  args: CreateStudentQueryArgs
): Promise<CreateStudentQueryReturns> {
  return client.queryRequiredSingle(
    `\
INSERT Student {
  major := <str>$major,
  enrollment_year := <int16>$enrollment_year,
  expected_graduation := <int16>$expected_graduation,
  gpa := <float32>$gpa,
  completed_credits := <int16>$completed_credits,
  required_credits := <int16>$required_credits,
  advisor := (
    SELECT Advisor
    FILTER .user.email = <str>$advisor_email
    LIMIT 1
  ),
  user := (
    SELECT User
    FILTER .id= <uuid>$user_id
    LIMIT 1
  ),
  role := "STUDENT",
};`,
    args
  );
}

export type CreateAdvisorQueryArgs = {
  readonly department: string;
  readonly user_id: string;
  readonly office?: string | null;
  readonly office_hours?: string | null;
  readonly phone?: string | null;
};

export type CreateAdvisorQueryReturns = {
  id: string;
};

export function createAdvisorQuery(
  client: Executor,
  args: CreateAdvisorQueryArgs
): Promise<CreateAdvisorQueryReturns> {
  return client.queryRequiredSingle(
    `\
INSERT Advisor{
  department := <str>$department,
    office := <optional str>$office,
    office_hours := <optional str>$office_hours,
    phone := <optional str>$phone,  
  user := (
    SELECT User
    FILTER .id= <uuid>$user_id
    LIMIT 1
  ),
  role := "ADVISOR",
};`,
    args
  );
}

export type GetAdvisorsQueryReturns = Array<{
  department: string;
  id: string;
  role: "STUDENT" | "ADVISOR";
  created_at: Date | null;
  is_deleted: boolean | null;
  office: string | null;
  office_hours: string | null;
  phone: string | null;
  updated_at: Date | null;
  students: Array<{
    serial_id: number;
  }>;
  user: {
    email: string;
    name: string;
    serial_id: number;
  };
}>;

export function getAdvisorsQuery(client: Executor): Promise<GetAdvisorsQueryReturns> {
  return client.query(`\
SELECT Advisor {
  *,
  user: {
    serial_id,
    name,
    email
  },
  students := .<advisor[IS Student].user {
    serial_id,
  }
}
FILTER .is_deleted = false`);
}
